
    processor 6502              ; -----------------------------------------------------
				; Special03: 125th Subscriber; 8blit Christmas Yule Log 2022
    include "vcs.h"             ;
    include "macro.h"           ; A quick and DIRTY routine to draw a 'fire' using the playfield registers.
                                ;
                                ; This Episode on Youtube - https://youtu.be/z5OB81NpcGA
                                ;
                                ; Become a Patron - https://patreon.com/8blit
                                ; Subscribe to 8Blit - https://www.youtube.com/8blit
                                ; Follow on Facebook - https://www.facebook.com/8Blit
                                ; Follow on Instagram - https://www.instagram.com/8blit
                                ; Tweet on Twitter - https://twitter.com/8blit0
                                ; Visit the Website - https://www.8blit.com    
                                ;
                                ; Email - 8blit0@gmail.com
                                ;
                                ; Portions of the code and the binary playfield files 
                                ; were generated using Dithertron by http://8bitworkshop.com/dithertron

                                ; How it was built:
                                ; 1) Downloaded a public domain video of a fire
                                ; 2) Used Adobe Premier to capture several snaphots of video frames
                                ; 3) Cropped the snaphost to a 4:3 size     
                                ; 4) Used Dithertron to convert the images into a 2600 playfield data file
                                ; 5) Used some code generated by Dithertron to read the data file
                                ; 6) Created pointers to the image data
                                ; 7) Added code to flip between images every nth frame
                                ; 8) Added data tables for flame color and background color

                                ; How it was presented:
                                ; 1) Compiled using Atari Dev Kit + dasm assembler
                                ; 2) Saved to a Micro SD
                                ; 3) Played on a Harmony Cart on a light sixer attached to a 13" Panasonic CRT TV

        seg.u vars
        org $80
    
PF0_ptr         ds 2    
PF1_ptr         ds 2    
PF2_ptr         ds 2    
PF3_ptr         ds 2    
PF4_ptr         ds 2    
PF5_ptr         ds 2 

cel             ds 1
rate            ds 1

        seg Code
        org $f000

reset
        CLEAN_START

        ldx #0
        stx cel
        stx rate

nextframe
        VERTICAL_SYNC

        sta WSYNC
        sta WSYNC
        sta WSYNC
        sta WSYNC

        ldx #63        
        stx TIM64T      

        lda rate
        bne skip1 

        lda #15
        sta rate

        lda cel
        cmp #%10
        bne skip2           
        lda #255
        sta cel

skip2
        inc cel
skip1
        ldx cel
        dec rate

    ; x will be the cel
        lda PF0_lsb_ptr,x 
        sta PF0_ptr       
        lda PF0_msb_ptr,x 
        sta PF0_ptr+1   
        lda PF1_lsb_ptr,x 
        sta PF1_ptr       
        lda PF1_msb_ptr,x 
        sta PF1_ptr+1   
        lda PF2_lsb_ptr,x 
        sta PF2_ptr       
        lda PF2_msb_ptr,x 
        sta PF2_ptr+1   
        lda PF3_lsb_ptr,x 
        sta PF3_ptr       
        lda PF3_msb_ptr,x 
        sta PF3_ptr+1   
        lda PF4_lsb_ptr,x 
        sta PF4_ptr       
        lda PF4_msb_ptr,x 
        sta PF4_ptr+1   
        lda PF5_lsb_ptr,x 
        sta PF5_ptr       
        lda PF5_msb_ptr,x 
        sta PF5_ptr+1   

        ; set playfield foreground and background
        lda #$00
        sta COLUBK
        lda #$32
        sta COLUPF

checktimer:
        lda INTIM           ; time remaining (or past)
        bne checktimer      ; burn remaining cycles   

        ldy #192

kernel
        ldx BGColor,y
        lda PFColor,y
        sta WSYNC
        sta COLUPF
        stx COLUBK    
        lda (PF0_ptr),y
        sta PF0		        ; store first playfield byte
        lda (PF1_ptr),y
        sta PF1		        ; store 2nd byte
        lda (PF2_ptr),y
        sta PF2		        ; store 3rd byte
        lda (PF3_ptr),y
        sta PF0		        ; store 4th byte
        lda (PF4_ptr),y
        sta PF1		        ; store 5th byte
        lda (PF5_ptr),y
        sta PF2		        ; store 6th byte
        dey 
        bne kernel

        sta WSYNC
        lda #0
        sta PF0
        sta PF1
        sta PF2		        ; clear playfield

        ldx #35             ; We'll round down, and clean up the remaining cycles with a WSYNC
        stx TIM64T          ; Set a count of 35 with 64-clock interval

timer2          
        ldx INTIM
        bne timer2

        jmp nextframe

; BITMAP DATA

PFBitmap0 equ .+192*0
PFBitmap1 equ .+192*1
PFBitmap2 equ .+192*2
PFBitmap3 equ .+192*3
PFBitmap4 equ .+192*4
PFBitmap5 equ .+192*5
    incbin "b6.bin"
PFBitmap6 equ .+192*0
PFBitmap7 equ .+192*1
PFBitmap8 equ .+192*2
PFBitmap9 equ .+192*3
PFBitmap10 equ .+192*4
PFBitmap11 equ .+192*5
    incbin "b7.bin"
PFBitmap12 equ .+192*0
PFBitmap13 equ .+192*1
PFBitmap14 equ .+192*2
PFBitmap15 equ .+192*3
PFBitmap16 equ .+192*4
PFBitmap17 equ .+192*5
    incbin "b8.bin"

PF0_lsb_ptr  
        .byte <PFBitmap0     
        .byte <PFBitmap6
        .byte <PFBitmap12
        .byte <PFBitmap6
PF0_msb_ptr  
        .byte >PFBitmap0     
        .byte >PFBitmap6      
        .byte >PFBitmap12
        .byte >PFBitmap6
PF1_lsb_ptr  
        .byte <PFBitmap1     
        .byte <PFBitmap7
        .byte <PFBitmap13
        .byte <PFBitmap1
PF1_msb_ptr  
        .byte >PFBitmap1     
        .byte >PFBitmap7      
        .byte >PFBitmap13          
        .byte >PFBitmap7
PF2_lsb_ptr  
        .byte <PFBitmap2     
        .byte <PFBitmap8
        .byte <PFBitmap14
        .byte <PFBitmap8
PF2_msb_ptr  
        .byte >PFBitmap2     
        .byte >PFBitmap8      
        .byte >PFBitmap14          
        .byte >PFBitmap8
PF3_lsb_ptr  
        .byte <PFBitmap3     
        .byte <PFBitmap9
        .byte <PFBitmap15
        .byte <PFBitmap9
PF3_msb_ptr  
        .byte >PFBitmap3     
        .byte >PFBitmap9      
        .byte >PFBitmap15          
        .byte >PFBitmap9
PF4_lsb_ptr  
        .byte <PFBitmap4     
        .byte <PFBitmap10
        .byte <PFBitmap16
        .byte <PFBitmap10
PF4_msb_ptr  
        .byte >PFBitmap4     
        .byte >PFBitmap10      
        .byte >PFBitmap16          
        .byte >PFBitmap10
PF5_lsb_ptr  
        .byte <PFBitmap5     
        .byte <PFBitmap11
        .byte <PFBitmap17
        .byte <PFBitmap11
PF5_msb_ptr  
        .byte >PFBitmap5     
        .byte >PFBitmap11      
        .byte >PFBitmap17          
        .byte >PFBitmap11

PFColor
        HEX 1A 1A 1A 1A 1A 1A 1A 1A 1A 1A 1A 1A 1A 1A 1A 1A 1A 1A 1A 1A
        HEX 1A 1A 1A 1A 1A 1A 1A 1C 1A 1A 1C 1A 1C 1A 1C 1C 1A 1C 1C 1A
        HEX 1C 1C 1C 1C 1E 1C 1C 1E 1C 1C 1E 1C 1E 1C 1E 1C 1E 1E 1C 1E
        HEX 1E FE 1E 1E FE 1E FE 1E FE FE 1E FE FE 1C FE FE FC FE FC FE 
        HEX FC FA FC FA FC FA FA FC FA FC FA FA FC FA FA FA F8 FA FA F8 
        HEX FA F8 FA F8 F8 FA F8 F8 26 F8 F8 26 F8 26 F8 26 26 F8 26 F8 
        HEX 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24
        HEX 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32
        HEX 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32
        HEX 32 32 32 32 32 32 32 32 32 32 32 32 00

BGColor
        HEX 00 70 70 70 00 70 70 00 70 00 70 00 00 70 00 00 70 00 00 00
        HEX 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        HEX 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        HEX 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        HEX 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        HEX 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        HEX 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        HEX 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        HEX 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
        HEX 00 00 00 00 00 00 00 00 00 00 00 00 00

        org 	$FFFA

        .word reset     	; NMI  ($FFFA)
        .word reset     	; RESET ($FFFC)
        .word reset     	; IRQ ($FFFE)

